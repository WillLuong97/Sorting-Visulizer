{"ast":null,"code":"export function getSelectionSortAnimation(array) {\n  let animations = [];\n  let auxillaryArray = array.slice();\n  selectionSort(auxillaryArray, animations);\n  return animations;\n}\n\nfunction selectionSort(auxillaryArray, animations) {\n  const N = auxillaryArray.length;\n\n  for (let i = 0; i < N - 1; i++) {\n    let minIndex = i; //Finding minimum element in unsorted array\n\n    for (let j = i + 1; j < N; j++) {\n      animations.push([\"comparision1\", j, minIndex]);\n      animations.push([\"comparision2\", j, minIndex]);\n\n      if (auxillaryArray[j] < auxillaryArray[minIndex]) {\n        minIndex = j;\n      }\n    }\n\n    animations.push([\"swap\", minIndex, auxillaryArray[i]]);\n    animations.push([\"swap\", i, auxillaryArray[minIndex]]); // Swap the found minimum element with the first element\n\n    swap(auxillaryArray, minIndex, i);\n  }\n}\n\nfunction swap(auxillaryArray, firstIndex, secondIndex) {\n  let temp = auxillaryArray[firstIndex];\n  auxillaryArray[firstIndex] = auxillaryArray[secondIndex];\n  auxillaryArray[secondIndex] = temp;\n}\n\nfunction arraysAreEqual(firstArray, secondArray) {\n  if (firstArray.length !== secondArray.length) {\n    return false;\n  }\n\n  for (let i = 0; i < firstArray.length; i++) {\n    if (firstArray[i] !== secondArray[i]) {\n      return false;\n    }\n  }\n\n  return true;\n}","map":{"version":3,"sources":["/Users/willieluong/Desktop/sorting-visualizer/src/sortinalgorithms/selectionSort.js"],"names":["getSelectionSortAnimation","array","animations","auxillaryArray","slice","selectionSort","N","length","i","minIndex","j","push","swap","firstIndex","secondIndex","temp","arraysAreEqual","firstArray","secondArray"],"mappings":"AAAA,OAAO,SAASA,yBAAT,CAAmCC,KAAnC,EAA0C;AAC7C,MAAIC,UAAU,GAAI,EAAlB;AACA,MAAIC,cAAc,GAAGF,KAAK,CAACG,KAAN,EAArB;AACAC,EAAAA,aAAa,CAACF,cAAD,EAAiBD,UAAjB,CAAb;AACA,SAAOA,UAAP;AACH;;AAED,SAASG,aAAT,CAAuBF,cAAvB,EAAuCD,UAAvC,EAAmD;AAC/C,QAAMI,CAAC,GAAGH,cAAc,CAACI,MAAzB;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,CAAC,GAAG,CAAxB,EAA2BE,CAAC,EAA5B,EAAgC;AAC5B,QAAIC,QAAQ,GAAGD,CAAf,CAD4B,CACV;;AAClB,SAAK,IAAIE,CAAC,GAAGF,CAAC,GAAG,CAAjB,EAAoBE,CAAC,GAAGJ,CAAxB,EAA2BI,CAAC,EAA5B,EAAgC;AAC5BR,MAAAA,UAAU,CAACS,IAAX,CAAgB,CAAC,cAAD,EAAiBD,CAAjB,EAAoBD,QAApB,CAAhB;AACAP,MAAAA,UAAU,CAACS,IAAX,CAAgB,CAAC,cAAD,EAAiBD,CAAjB,EAAoBD,QAApB,CAAhB;;AACA,UAAIN,cAAc,CAACO,CAAD,CAAd,GAAoBP,cAAc,CAACM,QAAD,CAAtC,EAAkD;AAC9CA,QAAAA,QAAQ,GAAGC,CAAX;AACH;AACJ;;AACDR,IAAAA,UAAU,CAACS,IAAX,CAAgB,CAAC,MAAD,EAASF,QAAT,EAAmBN,cAAc,CAACK,CAAD,CAAjC,CAAhB;AACAN,IAAAA,UAAU,CAACS,IAAX,CAAgB,CAAC,MAAD,EAASH,CAAT,EAAYL,cAAc,CAACM,QAAD,CAA1B,CAAhB,EAV4B,CAW5B;;AACAG,IAAAA,IAAI,CAACT,cAAD,EAAiBM,QAAjB,EAA2BD,CAA3B,CAAJ;AACH;AACJ;;AAED,SAASI,IAAT,CAAcT,cAAd,EAA8BU,UAA9B,EAA0CC,WAA1C,EAAuD;AACnD,MAAIC,IAAI,GAAGZ,cAAc,CAACU,UAAD,CAAzB;AACAV,EAAAA,cAAc,CAACU,UAAD,CAAd,GAA6BV,cAAc,CAACW,WAAD,CAA3C;AACAX,EAAAA,cAAc,CAACW,WAAD,CAAd,GAA8BC,IAA9B;AACH;;AAED,SAASC,cAAT,CAAwBC,UAAxB,EAAoCC,WAApC,EAAiD;AAC7C,MAAID,UAAU,CAACV,MAAX,KAAsBW,WAAW,CAACX,MAAtC,EAA8C;AAC1C,WAAO,KAAP;AACH;;AACD,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGS,UAAU,CAACV,MAA/B,EAAuCC,CAAC,EAAxC,EAA4C;AAC1C,QAAIS,UAAU,CAACT,CAAD,CAAV,KAAkBU,WAAW,CAACV,CAAD,CAAjC,EAAsC;AACpC,aAAO,KAAP;AACD;AACF;;AACD,SAAO,IAAP;AACH","sourcesContent":["export function getSelectionSortAnimation(array) {\n    let animations  = [];\n    let auxillaryArray = array.slice();\n    selectionSort(auxillaryArray, animations);\n    return animations;\n}\n\nfunction selectionSort(auxillaryArray, animations) {\n    const N = auxillaryArray.length;\n    for (let i = 0; i < N - 1; i++) {\n        let minIndex = i; //Finding minimum element in unsorted array\n        for (let j = i + 1; j < N; j++) {\n            animations.push([\"comparision1\", j, minIndex]);\n            animations.push([\"comparision2\", j, minIndex]);\n            if (auxillaryArray[j] < auxillaryArray[minIndex]) {\n                minIndex = j;\n            }\n        }\n        animations.push([\"swap\", minIndex, auxillaryArray[i]]);\n        animations.push([\"swap\", i, auxillaryArray[minIndex]]);\n        // Swap the found minimum element with the first element\n        swap(auxillaryArray, minIndex, i);\n    }\n}\n\nfunction swap(auxillaryArray, firstIndex, secondIndex) {\n    let temp = auxillaryArray[firstIndex];\n    auxillaryArray[firstIndex] = auxillaryArray[secondIndex];\n    auxillaryArray[secondIndex] = temp;\n}\n\nfunction arraysAreEqual(firstArray, secondArray) {\n    if (firstArray.length !== secondArray.length) {\n        return false;\n    }\n    for (let i = 0; i < firstArray.length; i++) {\n      if (firstArray[i] !== secondArray[i]) {\n        return false;\n      }\n    }\n    return true;\n}"]},"metadata":{},"sourceType":"module"}
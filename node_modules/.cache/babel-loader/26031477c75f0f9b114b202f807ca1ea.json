{"ast":null,"code":"// //The utils file will handle  backend of each sorting algorithms\n// //as well as the animation logic behind it. \n// //exporting function to other file\n// //this function will merge sort the array and visualize the process to the JS front end. \n// export function getMergeSortAnimations(array)\n// {\n//     //an array of indices of elements being evaluated in the array.\n//     const animation = [];\n//     // if the array to be sorted only has one element, return it, no sorting to be done\n//     if(array.length <= 1)\n//     {\n//         return array;\n//     }\n//     //supplement array that store the original array.\n//     const auxilaryArray = array.slice();\n//     mergeSortHelper(array, 0, array.length - 1, auxilaryArray, animation);\n//     console.log(animation)\n//     return animation;\n// }//end of function\n// //Helper method to begin the merge sort algorithm\n// function mergeSortHelper(mainArray, startIndex, endIndex, auxilaryArray, animation)\n// {\n//     //if the array is empty: \n//     if(startIndex === endIndex)\n//     {\n//         return; //break \n//     }\n//     //finding the middle index in the array: \n//     const middleIndex = Math.floor((startIndex + endIndex) / 2);\n//     //sort the first halves and second halves of the main array through recursion \n//     mergeSortHelper(auxilaryArray, startIndex, middleIndex, mainArray, animation);\n//     mergeSortHelper(auxilaryArray, middleIndex + 1, endIndex, mainArray, animation);\n//     //after sorting each array, we will them together\n//     doMerge(mainArray, startIndex, middleIndex, endIndex, auxilaryArray, animation);\n// }//end of mergeSortHelper()\n// //function to merge the two array together and process the animation: \n// function doMerge(mainArray, startIndex, middleIndex, endIndex, auxilaryArray, animation)\n// {\n//     //initialize variables: \n//     let k = startIndex;\n//     let i = startIndex; \n//     let j = middleIndex + 1;\n//     while(i <= middleIndex && j <= endIndex)\n//     {\n//         //these are the values that are being checked by the algorithm, we will push them into the animation list \n//         //to change its color\n//         animation.push([i, j]);\n//         //we will push them the second time to revert their color:\n//         animation.push([i, j]);\n//         if(auxilaryArray[i] <= auxilaryArray[j])\n//         {\n//             //we overwrite the value at index k (which is still a starting index here), in the original array \n//             // with the value at index i in the auxilary array\n//             //we swap the two element\n//             animation.push(k, auxilaryArray[i]);\n//             //increment the current index in both array\n//             mainArray[k++] = auxilaryArray[i++];\n//         }\n//         else{\n//             //we will overwrite the value at index k in the original array with the \n//             //value at index j in the auxilary array. \n//             animation.push([k, auxilaryArray[j]]);\n//             mainArray[k++] = auxilaryArray[j++];\n//         }\n//     }\n//     while (i <= middleIndex)\n//     {\n//         //these are the values that we are comparing, we push them once \n//         //we push them once to change the color\n//         animation.push([i, i]); \n//         //these are the values that we are comparing; we push them a second \n//         //time to revert the color\n//         animation.push([i,i]);\n//         // We overwrite the value at index k in the original array with the\n//         // value at index i in the auxiliary array.\n//         animation.push([k, auxilaryArray[i]]);\n//         mainArray[k++] = auxilaryArray[i++];\n//     }\n//     while (j <= endIndex)\n//     {\n//         // These are the values that we're comparing; we push them once\n//         // to change their color.\n//         animation.push([j, j]);\n//         // These are the values that we're comparing; we push them a second\n//         // time to revert their color.\n//         animation.push([j, j]);\n//         // We overwrite the value at index k in the original array with the\n//         // value at index j in the auxiliary array.\n//         animation.push([k, auxilaryArray[j]]);\n//         mainArray[k++] = auxilaryArray[j++];\n//     }\n// }//end of program\nexport function getMergeSortAnimations(array) {\n  const animations = [];\n  if (array.length <= 1) return array;\n  const auxiliaryArray = array.slice();\n  mergeSortHelper(array, 0, array.length - 1, auxiliaryArray, animations);\n  return animations;\n}\n\nfunction mergeSortHelper(mainArray, startIdx, endIdx, auxiliaryArray, animations) {\n  if (startIdx === endIdx) return;\n  const middleIdx = Math.floor((startIdx + endIdx) / 2);\n  mergeSortHelper(auxiliaryArray, startIdx, middleIdx, mainArray, animations);\n  mergeSortHelper(auxiliaryArray, middleIdx + 1, endIdx, mainArray, animations);\n  doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations);\n}\n\nfunction doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations) {\n  let k = startIdx;\n  let i = startIdx;\n  let j = middleIdx + 1;\n\n  while (i <= middleIdx && j <= endIdx) {\n    // These are the values that we're comparing; we push them once\n    // to change their color.\n    animations.push([i, j]); // These are the values that we're comparing; we push them a second\n    // time to revert their color.\n\n    animations.push([i, j]);\n\n    if (auxiliaryArray[i] <= auxiliaryArray[j]) {\n      // We overwrite the value at index k in the original array with the\n      // value at index i in the auxiliary array.\n      animations.push([k, auxiliaryArray[i]]);\n      mainArray[k++] = auxiliaryArray[i++];\n    } else {\n      // We overwrite the value at index k in the original array with the\n      // value at index j in the auxiliary array.\n      animations.push([k, auxiliaryArray[j]]);\n      mainArray[k++] = auxiliaryArray[j++];\n    }\n  }\n\n  while (i <= middleIdx) {\n    // These are the values that we're comparing; we push them once\n    // to change their color.\n    animations.push([i, i]); // These are the values that we're comparing; we push them a second\n    // time to revert their color.\n\n    animations.push([i, i]); // We overwrite the value at index k in the original array with the\n    // value at index i in the auxiliary array.\n\n    animations.push([k, auxiliaryArray[i]]);\n    mainArray[k++] = auxiliaryArray[i++];\n  }\n\n  while (j <= endIdx) {\n    // These are the values that we're comparing; we push them once\n    // to change their color.\n    animations.push([j, j]); // These are the values that we're comparing; we push them a second\n    // time to revert their color.\n\n    animations.push([j, j]); // We overwrite the value at index k in the original array with the\n    // value at index j in the auxiliary array.\n\n    animations.push([k, auxiliaryArray[j]]);\n    mainArray[k++] = auxiliaryArray[j++];\n  }\n}","map":{"version":3,"sources":["/Users/willieluong/Desktop/sorting-visualizer/src/sortinalgorithms/sortingAlgorithms.js"],"names":["getMergeSortAnimations","array","animations","length","auxiliaryArray","slice","mergeSortHelper","mainArray","startIdx","endIdx","middleIdx","Math","floor","doMerge","k","i","j","push"],"mappings":"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","sourcesContent":["// //The utils file will handle  backend of each sorting algorithms\n// //as well as the animation logic behind it. \n\n// //exporting function to other file\n// //this function will merge sort the array and visualize the process to the JS front end. \n// export function getMergeSortAnimations(array)\n// {\n//     //an array of indices of elements being evaluated in the array.\n//     const animation = [];\n//     // if the array to be sorted only has one element, return it, no sorting to be done\n//     if(array.length <= 1)\n//     {\n//         return array;\n//     }\n//     //supplement array that store the original array.\n//     const auxilaryArray = array.slice();\n//     mergeSortHelper(array, 0, array.length - 1, auxilaryArray, animation);\n//     console.log(animation)\n//     return animation;\n// }//end of function\n\n// //Helper method to begin the merge sort algorithm\n// function mergeSortHelper(mainArray, startIndex, endIndex, auxilaryArray, animation)\n// {\n//     //if the array is empty: \n//     if(startIndex === endIndex)\n//     {\n//         return; //break \n//     }\n//     //finding the middle index in the array: \n//     const middleIndex = Math.floor((startIndex + endIndex) / 2);\n//     //sort the first halves and second halves of the main array through recursion \n//     mergeSortHelper(auxilaryArray, startIndex, middleIndex, mainArray, animation);\n//     mergeSortHelper(auxilaryArray, middleIndex + 1, endIndex, mainArray, animation);\n//     //after sorting each array, we will them together\n//     doMerge(mainArray, startIndex, middleIndex, endIndex, auxilaryArray, animation);\n// }//end of mergeSortHelper()\n\n// //function to merge the two array together and process the animation: \n// function doMerge(mainArray, startIndex, middleIndex, endIndex, auxilaryArray, animation)\n// {\n//     //initialize variables: \n//     let k = startIndex;\n//     let i = startIndex; \n//     let j = middleIndex + 1;\n//     while(i <= middleIndex && j <= endIndex)\n//     {\n//         //these are the values that are being checked by the algorithm, we will push them into the animation list \n//         //to change its color\n//         animation.push([i, j]);\n\n//         //we will push them the second time to revert their color:\n//         animation.push([i, j]);\n//         if(auxilaryArray[i] <= auxilaryArray[j])\n//         {\n//             //we overwrite the value at index k (which is still a starting index here), in the original array \n//             // with the value at index i in the auxilary array\n//             //we swap the two element\n//             animation.push(k, auxilaryArray[i]);\n//             //increment the current index in both array\n//             mainArray[k++] = auxilaryArray[i++];\n//         }\n\n//         else{\n//             //we will overwrite the value at index k in the original array with the \n//             //value at index j in the auxilary array. \n//             animation.push([k, auxilaryArray[j]]);\n//             mainArray[k++] = auxilaryArray[j++];\n//         }\n//     }\n\n//     while (i <= middleIndex)\n//     {\n//         //these are the values that we are comparing, we push them once \n//         //we push them once to change the color\n//         animation.push([i, i]); \n//         //these are the values that we are comparing; we push them a second \n//         //time to revert the color\n//         animation.push([i,i]);\n//         // We overwrite the value at index k in the original array with the\n//         // value at index i in the auxiliary array.\n//         animation.push([k, auxilaryArray[i]]);\n//         mainArray[k++] = auxilaryArray[i++];\n//     }\n\n//     while (j <= endIndex)\n//     {\n//         // These are the values that we're comparing; we push them once\n//         // to change their color.\n//         animation.push([j, j]);\n//         // These are the values that we're comparing; we push them a second\n//         // time to revert their color.\n//         animation.push([j, j]);\n//         // We overwrite the value at index k in the original array with the\n//         // value at index j in the auxiliary array.\n//         animation.push([k, auxilaryArray[j]]);\n//         mainArray[k++] = auxilaryArray[j++];\n//     }\n// }//end of program\n\n\nexport function getMergeSortAnimations(array) {\n    const animations = [];\n    if (array.length <= 1) return array;\n    const auxiliaryArray = array.slice();\n    mergeSortHelper(array, 0, array.length - 1, auxiliaryArray, animations);\n    return animations;\n  }\n  \n  function mergeSortHelper(\n    mainArray,\n    startIdx,\n    endIdx,\n    auxiliaryArray,\n    animations,\n  ) {\n    if (startIdx === endIdx) return;\n    const middleIdx = Math.floor((startIdx + endIdx) / 2);\n    mergeSortHelper(auxiliaryArray, startIdx, middleIdx, mainArray, animations);\n    mergeSortHelper(auxiliaryArray, middleIdx + 1, endIdx, mainArray, animations);\n    doMerge(mainArray, startIdx, middleIdx, endIdx, auxiliaryArray, animations);\n  }\n  \n  function doMerge(\n    mainArray,\n    startIdx,\n    middleIdx,\n    endIdx,\n    auxiliaryArray,\n    animations,\n  ) {\n    let k = startIdx;\n    let i = startIdx;\n    let j = middleIdx + 1;\n    while (i <= middleIdx && j <= endIdx) {\n      // These are the values that we're comparing; we push them once\n      // to change their color.\n      animations.push([i, j]);\n      // These are the values that we're comparing; we push them a second\n      // time to revert their color.\n      animations.push([i, j]);\n      if (auxiliaryArray[i] <= auxiliaryArray[j]) {\n        // We overwrite the value at index k in the original array with the\n        // value at index i in the auxiliary array.\n        animations.push([k, auxiliaryArray[i]]);\n        mainArray[k++] = auxiliaryArray[i++];\n      } else {\n        // We overwrite the value at index k in the original array with the\n        // value at index j in the auxiliary array.\n        animations.push([k, auxiliaryArray[j]]);\n        mainArray[k++] = auxiliaryArray[j++];\n      }\n    }\n    while (i <= middleIdx) {\n      // These are the values that we're comparing; we push them once\n      // to change their color.\n      animations.push([i, i]);\n      // These are the values that we're comparing; we push them a second\n      // time to revert their color.\n      animations.push([i, i]);\n      // We overwrite the value at index k in the original array with the\n      // value at index i in the auxiliary array.\n      animations.push([k, auxiliaryArray[i]]);\n      mainArray[k++] = auxiliaryArray[i++];\n    }\n    while (j <= endIdx) {\n      // These are the values that we're comparing; we push them once\n      // to change their color.\n      animations.push([j, j]);\n      // These are the values that we're comparing; we push them a second\n      // time to revert their color.\n      animations.push([j, j]);\n      // We overwrite the value at index k in the original array with the\n      // value at index j in the auxiliary array.\n      animations.push([k, auxiliaryArray[j]]);\n      mainArray[k++] = auxiliaryArray[j++];\n    }\n  }\n  "]},"metadata":{},"sourceType":"module"}
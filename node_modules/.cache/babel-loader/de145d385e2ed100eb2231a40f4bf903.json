{"ast":null,"code":"var _jsxFileName = \"/Users/willieluong/Desktop/sorting-visualizer/src/SortingVisualizer/SortingVisualizer.jsx\";\nimport React from 'react';\nimport './SortingVisualizer.css'; //the main function of the react app\n\nexport default class SortingVisualizer extends React.Component {\n  //sorting constructor:\n  constructor(props) {\n    super(props);\n    this.state = {\n      array: [] //main array that would print out the \n\n    };\n  } //when the component of the app is loaded, it will reset the current of element\n\n\n  componentDidMount() {\n    this.resetArray();\n  } //resetting the array and generate new elements each time\n\n\n  resetArray() {\n    const array = []; //generating random integer for sorting: \n\n    for (let i = 0; i <= 100; i++) {\n      //pushing the integer into the array: \n      array.push(randomIntGeneration(5, 1000));\n    }\n\n    this.setState({\n      array\n    });\n  }\n\n  render() {\n    const {\n      array\n    } = this.state;\n    return (\n      /*#__PURE__*/\n      // <div className=\"array-container\">\n      React.createElement(React.Fragment, null, array.map((value, idx) => /*#__PURE__*/React.createElement(\"div\", {\n        className: \"array-bar\",\n        key: idx // style={{\n        //   backgroundColor: PRIMARY_COLOR,\n        //   height: `${value}px`,\n        // }}\n        ,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 13\n        }\n      }, \" \", value))) //   <button onClick={() => this.resetArray()}>Generate New Array</button>\n      //   <button onClick={() => this.mergeSort()}>Merge Sort</button>\n      //   <button onClick={() => this.quickSort()}>Quick Sort</button>\n      //   <button onClick={() => this.heapSort()}>Heap Sort</button>\n      //   <button onClick={() => this.bubbleSort()}>Bubble Sort</button>\n      //   <button onClick={() => this.testSortingAlgorithms()}>\n      //     Test Sorting Algorithms (BROKEN)\n      //   </button>\n      // </div>\n\n    );\n  }\n\n} //Function to generate random integer from 5 to 1000\n\nfunction randomIntGeneration(min, max) {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}","map":{"version":3,"sources":["/Users/willieluong/Desktop/sorting-visualizer/src/SortingVisualizer/SortingVisualizer.jsx"],"names":["React","SortingVisualizer","Component","constructor","props","state","array","componentDidMount","resetArray","i","push","randomIntGeneration","setState","render","map","value","idx","min","max","Math","floor","random"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,yBAAP,C,CAEA;;AACA,eAAe,MAAMC,iBAAN,SAAgCD,KAAK,CAACE,SAAtC,CAAgD;AAC3D;AACAC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AAEA,SAAKC,KAAL,GAAa;AACXC,MAAAA,KAAK,EAAE,EADI,CACC;;AADD,KAAb;AAGD,GAR0D,CAU3D;;;AACAC,EAAAA,iBAAiB,GAAG;AAClB,SAAKC,UAAL;AACD,GAb0D,CAe3D;;;AACAA,EAAAA,UAAU,GAAE;AACR,UAAMF,KAAK,GAAG,EAAd,CADQ,CAER;;AACA,SAAI,IAAIG,CAAC,GAAG,CAAZ,EAAeA,CAAC,IAAI,GAApB,EAAyBA,CAAC,EAA1B,EACA;AACI;AACAH,MAAAA,KAAK,CAACI,IAAN,CAAWC,mBAAmB,CAAC,CAAD,EAAI,IAAJ,CAA9B;AAEH;;AAED,SAAKC,QAAL,CAAc;AAACN,MAAAA;AAAD,KAAd;AAEH;;AAEDO,EAAAA,MAAM,GACN;AACI,UAAM;AAACP,MAAAA;AAAD,QAAU,KAAKD,KAArB;AAEA;AAAA;AAEE;AACA,gDACCC,KAAK,CAACQ,GAAN,CAAU,CAACC,KAAD,EAAQC,GAAR,kBACT;AAAK,QAAA,SAAS,EAAC,WAAf;AAA2B,QAAA,GAAG,EAAEA,GAAhC,CACE;AACA;AACA;AACA;AAJF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAKKD,KALL,CADD,CADD,CAHF,CAcA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAtBA;AA0BH;;AA5D0D,C,CAgE/D;;AACA,SAASJ,mBAAT,CAA6BM,GAA7B,EAAkCC,GAAlC,EACA;AACE,SAAOC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,MAAiBH,GAAG,GAAGD,GAAN,GAAY,CAA7B,IAAkCA,GAA7C,CAAP;AACD","sourcesContent":["import React from 'react';\nimport './SortingVisualizer.css';\n\n//the main function of the react app\nexport default class SortingVisualizer extends React.Component {\n    //sorting constructor:\n    constructor(props) {\n      super(props);\n  \n      this.state = {\n        array: [],  //main array that would print out the \n      };\n    }\n    \n    //when the component of the app is loaded, it will reset the current of element\n    componentDidMount() {\n      this.resetArray();\n    }\n\n    //resetting the array and generate new elements each time\n    resetArray(){\n        const array = [];\n        //generating random integer for sorting: \n        for(let i = 0; i <= 100; i++)\n        {\n            //pushing the integer into the array: \n            array.push(randomIntGeneration(5, 1000));\n            \n        }\n\n        this.setState({array});\n\n    }\n\n    render()\n    {\n        const {array} = this.state;\n\n        return (\n\n          // <div className=\"array-container\">\n          <>\n          {array.map((value, idx) => (\n            <div className=\"array-bar\" key={idx}\n              // style={{\n              //   backgroundColor: PRIMARY_COLOR,\n              //   height: `${value}px`,\n              // }}\n              > {value}\n              </div>\n          ))}\n          </>\n        //   <button onClick={() => this.resetArray()}>Generate New Array</button>\n        //   <button onClick={() => this.mergeSort()}>Merge Sort</button>\n        //   <button onClick={() => this.quickSort()}>Quick Sort</button>\n        //   <button onClick={() => this.heapSort()}>Heap Sort</button>\n        //   <button onClick={() => this.bubbleSort()}>Bubble Sort</button>\n        //   <button onClick={() => this.testSortingAlgorithms()}>\n        //     Test Sorting Algorithms (BROKEN)\n        //   </button>\n        // </div>\n            \n        );\n\n    }\n\n}\n\n//Function to generate random integer from 5 to 1000\nfunction randomIntGeneration(min, max) \n{\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"var _jsxFileName = \"/Users/willieluong/Desktop/sorting-visualizer/src/SortingVisualizer/SortingVisualizer.jsx\";\nimport React from 'react';\nimport './SortingVisualizer.css'; //the main function of the react app\n\nexport default class SortingVisualizer extends React.Component {\n  //sorting constructor:\n  constructor(props) {\n    super(props);\n    this.state = {\n      array: [] //main array that would print out the \n\n    };\n  } //when the component of the app is loaded, it will reset the current of element\n\n\n  componentDidMount() {\n    this.resetArray();\n  } //resetting the array and generate new elements each time\n\n\n  resetArray() {\n    const array = []; //generating random integer for sorting: \n\n    for (let i = 0; i <= 310; i++) {\n      //pushing the integer into the array: \n      array.push(randomIntGeneration(5, 730));\n    }\n\n    this.setState({\n      array\n    });\n  } //Helper method: \n\n\n  mergeArr(leftSide, rightSide) {\n    let resultArray = [];\n    let leftIndex = 0;\n    let rightIndex = 0; //concatenate the two strings and sort them accordingly:\n\n    while (leftIndex < leftSide.length && rightIndex < rightSide.length) {\n      if (leftSide[leftIndex] < rightSide[rightIndex]) {\n        resultArray.push(leftSide[leftIndex]); //move the left cursor up:\n\n        leftIndex++;\n      } else {\n        resultArray.push(rightSide[rightIndex]); //move the right cursor up: \n\n        rightIndex++;\n      }\n    } //concat the two array together:\n    //we perform concatenation here because there will be one element remaining in both array:\n\n\n    return resultArray.concat(leftSide.slice[left]).concat(rightSide.slice[rightIndex]);\n  } //sorting alorithms:\n\n\n  mergeSort(unsortedArray) {\n    //the array must contains value inside it\n    if (unsortedArray.length < 1) {\n      alert(\"Error! Array is empty!\");\n    } //if the array only contain 1 element, then no need to sort and return the array\n\n\n    if (unsortedArray.length == 1) {\n      return unsortedArray;\n    } //To divide the array in halfs, we must find the element in the middle\n\n\n    const middle = math.floor(unsortedArray.length / 2); //divide the array into left and right sub-arrays:\n\n    const leftArr = unsortedArray.slice(0, middle);\n    const rightArr = unsortedArray.slice(middle); //calls the function recursively to sort the two arrays and merge them together\n\n    return mergeArr(this.mergeSort(leftArr), this.mergeSort(rightArr));\n  } //end of mergeSort(array)\n  //Sorting algorithm to implement: \n\n\n  mergeSortImpl() {}\n\n  quickSortImpl() {}\n\n  heapSortImpl() {}\n\n  bubbleSortImpl() {}\n\n  render() {\n    const {\n      array\n    } = this.state;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"array-container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(React.Fragment, null, array.map((value, idx) => /*#__PURE__*/React.createElement(\"div\", {\n      className: \"array-bar\",\n      key: idx,\n      style: {\n        // backgroundColor: PRIMARY_COLOR,\n        height: `${value}px`\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 13\n      }\n    }))), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => this.resetArray(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 12\n      }\n    }, \"Generate New Array\"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => this.mergeSortImpl(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 12\n      }\n    }, \"Merge Sort\"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => this.quickSortImpl(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 12\n      }\n    }, \"Quick Sort\"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => this.heapSortImpl(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 12\n      }\n    }, \"Heap Sort\"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => this.bubbleSortImpl(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 12\n      }\n    }, \"Bubble Sort\"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => this.testSortingAlgorithms(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 12\n      }\n    }, \"Test Sorting Algorithms (BROKEN)\"));\n  }\n\n} //Function to generate random integer from 5 to 1000\n\nfunction randomIntGeneration(min, max) {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n} //Function to test if two array of elements equal to each other\n\n\nfunction checkArrayEqual(arr1, arr2) {\n  //if the two arrays are not equal to each other in length, then they are not equal.\n  if (arr1.length != arr2.length) {\n    return false;\n  } // looping through each character and check if they are both equals\n\n\n  for (let i = 0; i < arr1.length; i++) {\n    if (arr1[i] === arr2[i]) {\n      //array are equals\n      return true;\n    }\n  }\n\n  return false;\n}","map":{"version":3,"sources":["/Users/willieluong/Desktop/sorting-visualizer/src/SortingVisualizer/SortingVisualizer.jsx"],"names":["React","SortingVisualizer","Component","constructor","props","state","array","componentDidMount","resetArray","i","push","randomIntGeneration","setState","mergeArr","leftSide","rightSide","resultArray","leftIndex","rightIndex","length","concat","slice","left","mergeSort","unsortedArray","alert","middle","math","floor","leftArr","rightArr","mergeSortImpl","quickSortImpl","heapSortImpl","bubbleSortImpl","render","map","value","idx","height","testSortingAlgorithms","min","max","Math","random","checkArrayEqual","arr1","arr2"],"mappings":"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","sourcesContent":["import React from 'react';\nimport './SortingVisualizer.css';\n\n//the main function of the react app\nexport default class SortingVisualizer extends React.Component {\n    //sorting constructor:\n    constructor(props) {\n      super(props);\n  \n      this.state = {\n        array: [],  //main array that would print out the \n      };\n    }\n    \n    //when the component of the app is loaded, it will reset the current of element\n    componentDidMount() {\n      this.resetArray();\n    }\n\n    //resetting the array and generate new elements each time\n    resetArray(){\n        const array = [];\n        //generating random integer for sorting: \n        for(let i = 0; i <= 310; i++)\n        {\n            //pushing the integer into the array: \n            array.push(randomIntGeneration(5, 730));\n            \n        }\n\n        this.setState({array});\n\n    }\n\n    //Helper method: \n    mergeArr(leftSide, rightSide)\n    {\n      let resultArray = []\n      let leftIndex = 0;\n      let rightIndex = 0; \n\n      //concatenate the two strings and sort them accordingly:\n      while(leftIndex < leftSide.length && rightIndex < rightSide.length)\n      {\n        if (leftSide[leftIndex] < rightSide[rightIndex])\n        {\n          resultArray.push(leftSide[leftIndex]);\n          //move the left cursor up:\n          leftIndex++\n        }\n\n        else{\n          resultArray.push(rightSide[rightIndex]);\n          //move the right cursor up: \n          rightIndex++;\n        }\n\n\n      }\n      //concat the two array together:\n      //we perform concatenation here because there will be one element remaining in both array:\n      return resultArray.concat(leftSide.slice[left]).concat(rightSide.slice[rightIndex]);\n\n\n    }\n\n    //sorting alorithms:\n    mergeSort(unsortedArray)\n    {\n      //the array must contains value inside it\n      if(unsortedArray.length < 1)\n      {\n        alert (\"Error! Array is empty!\");\n\n      }\n\n      //if the array only contain 1 element, then no need to sort and return the array\n      if(unsortedArray.length == 1)\n      {\n        return unsortedArray;\n      }\n\n      //To divide the array in halfs, we must find the element in the middle\n      const middle = math.floor(unsortedArray.length/2);\n\n      //divide the array into left and right sub-arrays:\n      const leftArr = unsortedArray.slice(0, middle);\n      const rightArr = unsortedArray.slice(middle);\n\n      //calls the function recursively to sort the two arrays and merge them together\n      return mergeArr(this.mergeSort(leftArr), this.mergeSort(rightArr))\n    } //end of mergeSort(array)\n    \n\n\n    //Sorting algorithm to implement: \n    mergeSortImpl()\n    {\n      \n\n\n    }\n\n    quickSortImpl()\n    {\n\n    }\n\n    heapSortImpl()\n    {\n\n    }\n\n    bubbleSortImpl()\n    {\n\n    }\n\n    render()\n    {\n        const {array} = this.state;\n\n        return (\n\n          <div className=\"array-container\">\n          <>\n          {array.map((value, idx) => (\n            <div className=\"array-bar\" key={idx}\n              style={{\n                // backgroundColor: PRIMARY_COLOR,\n                height: `${value}px`,\n              }}\n              > \n              </div>\n          ))}\n\n\n          </>\n           <button onClick={() => this.resetArray()}>Generate New Array</button>\n           <button onClick={() => this.mergeSortImpl()}>Merge Sort</button>\n           <button onClick={() => this.quickSortImpl()}>Quick Sort</button>\n           <button onClick={() => this.heapSortImpl()}>Heap Sort</button>\n           <button onClick={() => this.bubbleSortImpl()}>Bubble Sort</button>\n           <button onClick={() => this.testSortingAlgorithms()}>\n             Test Sorting Algorithms (BROKEN)\n           </button>\n         \n        </div>\n            \n        );\n\n    }\n\n}\n\n//Function to generate random integer from 5 to 1000\nfunction randomIntGeneration(min, max) \n{\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}\n\n//Function to test if two array of elements equal to each other\nfunction checkArrayEqual(arr1, arr2)\n{\n  //if the two arrays are not equal to each other in length, then they are not equal.\n  if (arr1.length != arr2.length)\n  {\n    return false;\n  }\n\n  // looping through each character and check if they are both equals\n  for (let i=0; i < arr1.length; i++)\n  {\n    if (arr1[i] === arr2[i])\n    {\n      //array are equals\n      return true\n      \n    }\n\n  }\n  return false;\n}"]},"metadata":{},"sourceType":"module"}
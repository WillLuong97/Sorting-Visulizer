{"ast":null,"code":"var _jsxFileName = \"/Users/willieluong/Desktop/sorting-visualizer/src/SortingVisualizer/SortingVisualizer.jsx\";\n//import external dependencies:\nimport React from 'react';\nimport { getMergeSortAnimations } from '../sortinalgorithms/sortingAlgorithms.js';\nimport { getBubblesSortAnimations } from '../sortinalgorithms/BubbleSort.js';\nimport { getQuickSortAnimation } from '../sortinalgorithms/QuickSort.js';\nimport './SortingVisualizer.css'; //global variable to control the speed of the animation\n//for MERGE sort\n\nconst ANIMATION_SPEED_MS = 1; //number of array bars being displayed\n\nconst NUMBER_OF_ARRAY_BARS = 310; //main color of the array bars:\n\nconst PRIMARY_COLOR = 'turquoise'; //the color of the array bar that is being compared throughout the sort\n\nconst SECONDARY_COLOR = 'red'; //the main function of the react app\n\nexport default class SortingVisualizer extends React.Component {\n  //sorting constructor:\n  constructor(props) {\n    super(props);\n    this.state = {\n      array: [] //main array that would print out the element to be sorted.\n\n    };\n  } //when the component of the app is loaded, it will reset the current of element\n\n\n  componentDidMount() {\n    this.resetArray();\n  } //resetting the array and generate new elements each time\n\n\n  resetArray() {\n    const array = []; //generating random integer for sorting: \n\n    for (let i = 0; i <= NUMBER_OF_ARRAY_BARS; i++) {\n      //pushing the integer into the array: \n      array.push(randomIntGeneration(5, 730));\n    }\n\n    this.setState({\n      array\n    });\n  } //sorting alorithms:\n\n\n  mergeSortImpl() {\n    //variable to intialize the animation for the current given array\n    const animation = getMergeSortAnimations(this.state.array);\n\n    for (let i = 0; i < animation.length; i++) {\n      const arrayBar = document.getElementsByClassName('array-bar');\n      const isColorChange = i % 3 !== 2; //NEED TO RESEARCH MORE ABOUT THIS\n\n      if (isColorChange) {\n        const [barOneIndex, barTwoIndex] = animation[i];\n        const barOneStyle = arrayBar[barOneIndex].style;\n        const barTwoStyle = arrayBar[barTwoIndex].style;\n        const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i * ANIMATION_SPEED_MS);\n      } else {\n        setTimeout(() => {\n          const [barOneIndex, newHeight] = animation[i];\n          const barOneStyle = arrayBar[barOneIndex].style;\n          barOneStyle.height = `${newHeight}px`;\n        }, i * ANIMATION_SPEED_MS);\n      }\n    }\n  } //end of mergeSortImpl\n\n\n  quickSortImpl() {\n    //variable to hold the animation return value from the bubble sort function\n    const animation = getQuickSortAnimation(this.state.array);\n\n    for (let i = 0; i < animation.length - 1; i++) {\n      //extract the bar from the HTML side\n      const arrayBar = document.getElementsByClassName('array-bar');\n      const isColorChange = i % 6 === 0 || i % 6 === 1;\n\n      if (isColorChange === true) {\n        const color = i % 6 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\n        const [barOneIndex, barTwoIndex] = animation[i];\n\n        if (barOneIndex === -1 || barTwoIndex === -1) {\n          continue;\n        }\n\n        const barOneStyle = arrayBar[barOneIndex].style;\n        const barTwoStyle = arrayBar[barTwoIndex].style;\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i * ANIMATION_SPEED_MS);\n      } else {\n        const [barOneIndex, newHeight] = animation[i];\n\n        if (barOneIndex === -1) {\n          continue;\n        }\n\n        const barStyle = arrayBar[barOneIndex].style;\n        setTimeout(() => {\n          barStyle.height = `${newHeight}px`;\n        }, i * ANIMATION_SPEED_MS);\n      }\n    }\n  }\n\n  heapSortImpl() {} //bubble sort:\n\n\n  bubbleSortImpl() {\n    //variable to hold the animation return value from the bubble sort function\n    const animation = getBubblesSortAnimations(this.state.array);\n\n    for (let i = 0; i < animation.length; i++) {\n      //extract the bar from the HTML side\n      const arrayBar = document.getElementsByClassName('array-bar');\n      const isColorChange = i % 4 === 0 || i % 4 === 1;\n\n      if (isColorChange) {\n        const [barOneIndex, barTwoIndex] = animation[i];\n        const barOneStyle = arrayBar[barOneIndex].style;\n        const barTwoStyle = arrayBar[barTwoIndex].style;\n        const color = i % 4 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\n        setTimeout(() => {\n          barOneStyle.backgroundColor = color;\n          barTwoStyle.backgroundColor = color;\n        }, i * ANIMATION_SPEED_MS);\n      } else {\n        const [barOneIndex, newHeight] = animation[i];\n\n        if (barOneIndex === -1) {\n          continue;\n        }\n\n        const barStyle = arrayBar[barOneIndex].style;\n        setTimeout(() => {\n          barStyle.height = `${newHeight}px`;\n        }, i * ANIMATION_SPEED_MS);\n      }\n    }\n  } //end of bubble sort implementation\n  //function to test all sorting algorithm for debugging\n\n\n  testSortingAlgorithms() {\n    //the function will create 100 array with different length\n    for (var i = 0; i < 100; i++) {\n      // create an array at each iteration: \n      const array = []; //each array will have various length from 1 to 1000 \n\n      for (var j = 0; j < randomIntGeneration(1, 1000); j++) {\n        //the array will push element into it until the for loop is exhausted. \n        array.push(randomIntGeneration(0, 1000));\n      } //end for loop.\n      //testing the sorting algorithm: \n\n\n      const jsSortingBuiltIn = array.slice().sort((a, b) => a - b); //java built-in sorting function\n\n      const quickSort = getQuickSortAnimation(array.slice());\n      console.log(checkArrayEqual(jsSortingBuiltIn, quickSort));\n    }\n  }\n\n  render() {\n    const {\n      array\n    } = this.state;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"array-container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 201,\n        columnNumber: 11\n      }\n    }, array.map((value, idx) => /*#__PURE__*/React.createElement(\"div\", {\n      className: \"array-bar\",\n      key: idx,\n      style: {\n        backgroundColor: PRIMARY_COLOR,\n        height: `${value}px`\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 204,\n        columnNumber: 13\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"button\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 213,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => this.resetArray(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 214,\n        columnNumber: 13\n      }\n    }, \"Generate New Array\"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => this.mergeSortImpl(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 215,\n        columnNumber: 13\n      }\n    }, \"Merge Sort\"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => this.quickSortImpl(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 216,\n        columnNumber: 13\n      }\n    }, \"Quick Sort\"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => this.heapSortImpl(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 217,\n        columnNumber: 13\n      }\n    }, \"Heap Sort\"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => this.bubbleSortImpl(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 218,\n        columnNumber: 13\n      }\n    }, \"Bubble Sort\"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => this.testSortingAlgorithms(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 219,\n        columnNumber: 13\n      }\n    }, \"Test Sorting Algorithms(Quick sort)\")));\n  }\n\n} //Function to generate random integer from 5 to 1000\n\nfunction randomIntGeneration(min, max) {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n} //Function to test if two array of elements equal to each other\n\n\nfunction checkArrayEqual(arr1, arr2) {\n  //if the two arrays are not equal to each other in length, then they are not equal.\n  if (arr1.length !== arr2.length) {\n    return false;\n  } // looping through each character and check if they are both equals\n\n\n  for (let i = 0; i < arr1.length; i++) {\n    if (arr1[i] !== arr2[i]) {\n      //array are equals\n      return false;\n    }\n  }\n\n  return true;\n} //end of program\n// //Helper method: \n// mergeArr(leftSide, rightSide)\n// {\n//   let resultArray = []\n//   let leftIndex = 0;\n//   let rightIndex = 0; \n//   //concatenate the two strings and sort them accordingly:\n//   while(leftIndex < leftSide.length && rightIndex < rightSide.length)\n//   {\n//     if (leftSide[leftIndex] < rightSide[rightIndex])\n//     {\n//       resultArray.push(leftSide[leftIndex++]);\n//       // //move the left cursor up:\n//       // leftIndex++\n//     }\n//     else{\n//       resultArray.push(rightSide[rightIndex++]);\n//       // //move the right cursor up: \n//       // rightIndex++;\n//     }\n//   }\n//   while(leftIndex < leftSide.length) resultArray.push(leftSide[leftIndex++]);\n//   while(rightIndex < rightSide.length) resultArray.push(rightSide[rightIndex++]);\n//   //concat the two array together:\n//   //we perform concatenation here because there will be one element remaining in both array:\n//   // return resultArray.concat(leftSide.slice[leftIndex]).concat(rightSide.slice[rightIndex]);\n//   return resultArray;\n// }\n\n/* let sortedArray = [];\n  //the array must contains value inside it\n  if(unsortedArray.length < 1)\n  {\n    alert (\"Error! Array is empty!\");\n   }\n   //if the array only contain 1 element, then no need to sort and return the array\n  if(unsortedArray.length == 1)\n  {\n    return unsortedArray;\n  }\n   //To divide the array in halfs, we must find the element in the middle\n  const middle = Math.floor(unsortedArray.length/2);\n   //divide the array into left and right sub-arrays:\n  const leftArr = unsortedArray.slice(0, middle);\n  const rightArr = unsortedArray.slice(middle);\n  //calls the function recursively to sort the two arrays and merge them together\n  sortedArray = this.mergeArr(this.mergeSort(leftArr), this.mergeSort(rightArr));\n  return sortedArray;\n*/","map":{"version":3,"sources":["/Users/willieluong/Desktop/sorting-visualizer/src/SortingVisualizer/SortingVisualizer.jsx"],"names":["React","getMergeSortAnimations","getBubblesSortAnimations","getQuickSortAnimation","ANIMATION_SPEED_MS","NUMBER_OF_ARRAY_BARS","PRIMARY_COLOR","SECONDARY_COLOR","SortingVisualizer","Component","constructor","props","state","array","componentDidMount","resetArray","i","push","randomIntGeneration","setState","mergeSortImpl","animation","length","arrayBar","document","getElementsByClassName","isColorChange","barOneIndex","barTwoIndex","barOneStyle","style","barTwoStyle","color","setTimeout","backgroundColor","newHeight","height","quickSortImpl","barStyle","heapSortImpl","bubbleSortImpl","testSortingAlgorithms","j","jsSortingBuiltIn","slice","sort","a","b","quickSort","console","log","checkArrayEqual","render","map","value","idx","min","max","Math","floor","random","arr1","arr2"],"mappings":"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","sourcesContent":["//import external dependencies:\nimport React from 'react';\nimport {getMergeSortAnimations} from '../sortinalgorithms/sortingAlgorithms.js'\nimport {getBubblesSortAnimations} from '../sortinalgorithms/BubbleSort.js'\nimport {getQuickSortAnimation} from '../sortinalgorithms/QuickSort.js'\nimport './SortingVisualizer.css';\n//global variable to control the speed of the animation\n//for MERGE sort\nconst ANIMATION_SPEED_MS = 1;\n//number of array bars being displayed\nconst NUMBER_OF_ARRAY_BARS = 310; \n//main color of the array bars:\nconst PRIMARY_COLOR = 'turquoise';\n//the color of the array bar that is being compared throughout the sort\nconst SECONDARY_COLOR = 'red';\n\n//the main function of the react app\nexport default class SortingVisualizer extends React.Component {\n    //sorting constructor:\n    constructor(props) {\n      super(props);\n  \n      this.state = {\n        array: [],  //main array that would print out the element to be sorted.\n      };\n    }\n    \n    //when the component of the app is loaded, it will reset the current of element\n    componentDidMount() {\n      this.resetArray();\n    }\n\n    //resetting the array and generate new elements each time\n    resetArray(){\n        const array = [];\n        //generating random integer for sorting: \n        for(let i = 0; i <=  NUMBER_OF_ARRAY_BARS; i++)\n        {\n            //pushing the integer into the array: \n            array.push(randomIntGeneration(5, 730));\n        }\n        this.setState({array});\n    }\n\n    //sorting alorithms:\n    mergeSortImpl()\n    {\n      //variable to intialize the animation for the current given array\n      const animation = getMergeSortAnimations(this.state.array);\n      for(let i = 0; i < animation.length; i++)\n      {\n        const arrayBar = document.getElementsByClassName('array-bar');\n        const isColorChange = i % 3 !== 2; //NEED TO RESEARCH MORE ABOUT THIS\n        if(isColorChange)\n        {\n          const [barOneIndex, barTwoIndex] = animation[i];\n          const barOneStyle = arrayBar[barOneIndex].style;\n          const barTwoStyle = arrayBar[barTwoIndex].style;\n          const color = i % 3 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\n          setTimeout(() => {\n            barOneStyle.backgroundColor = color;\n            barTwoStyle.backgroundColor = color;\n          }, i * ANIMATION_SPEED_MS);\n        } \n        else{\n          setTimeout(() => {\n            const [barOneIndex, newHeight] = animation[i];\n            const barOneStyle = arrayBar[barOneIndex].style;\n            barOneStyle.height = `${newHeight}px`;\n          }, i * ANIMATION_SPEED_MS);\n        }\n      }\n    \n    } //end of mergeSortImpl\n    quickSortImpl()\n    {\n      //variable to hold the animation return value from the bubble sort function\n      const animation = getQuickSortAnimation(this.state.array);\n      for(let i = 0; i < animation.length - 1; i++)\n      {\n        //extract the bar from the HTML side\n        const arrayBar = document.getElementsByClassName('array-bar');\n        const isColorChange = (i % 6 === 0) || (i % 6 === 1);\n        if(isColorChange === true)\n        {\n          const color = (i % 6 === 0) ? SECONDARY_COLOR : PRIMARY_COLOR;\n          const [barOneIndex, barTwoIndex] = animation[i];\n          if (barOneIndex === -1 || barTwoIndex === -1)\n          {\n            continue;\n          }\n\n          const barOneStyle = arrayBar[barOneIndex].style;\n          const barTwoStyle = arrayBar[barTwoIndex].style;\n          setTimeout(() =>\n            {\n              barOneStyle.backgroundColor = color;\n              barTwoStyle.backgroundColor = color;\n\n            }, i * ANIMATION_SPEED_MS);\n\n        }\n\n        else\n        {\n          const [barOneIndex, newHeight] = animation[i];\n          if (barOneIndex === -1)\n          {\n            continue;\n          }\n\n          const barStyle = arrayBar[barOneIndex].style;\n          setTimeout(() => {\n            barStyle.height = `${newHeight}px`;\n          }, i * ANIMATION_SPEED_MS);\n        }\n\n      }\n    }\n\n    heapSortImpl()\n    {\n\n    }\n    \n\n    //bubble sort:\n    bubbleSortImpl()\n    {\n      //variable to hold the animation return value from the bubble sort function\n      const animation = getBubblesSortAnimations(this.state.array);\n      for(let i = 0; i < animation.length; i++)\n      {\n        //extract the bar from the HTML side\n        const arrayBar = document.getElementsByClassName('array-bar');\n        const isColorChange = (i % 4 === 0) || (i % 4 === 1);\n        if(isColorChange)\n        {\n          const [barOneIndex, barTwoIndex] = animation[i];\n          const barOneStyle = arrayBar[barOneIndex].style;\n          const barTwoStyle = arrayBar[barTwoIndex].style;\n          const color = i % 4 === 0 ? SECONDARY_COLOR : PRIMARY_COLOR;\n          setTimeout(() =>\n            {\n              barOneStyle.backgroundColor = color;\n              barTwoStyle.backgroundColor = color;\n\n            }, i * ANIMATION_SPEED_MS);\n\n        }\n\n        else\n        {\n          const [barOneIndex, newHeight] = animation[i];\n          if (barOneIndex === -1)\n          {\n            continue;\n          }\n\n          const barStyle = arrayBar[barOneIndex].style;\n          setTimeout(() => {\n            barStyle.height = `${newHeight}px`;\n          }, i * ANIMATION_SPEED_MS);\n        }\n\n      }\n\n    }//end of bubble sort implementation\n\n    //function to test all sorting algorithm for debugging\n    testSortingAlgorithms()\n    {\n      //the function will create 100 array with different length\n      for(var i = 0; i < 100; i++)\n      {\n        // create an array at each iteration: \n        const array = []\n        //each array will have various length from 1 to 1000 \n        for(var j = 0; j < randomIntGeneration(1, 1000); j++)\n        {\n          //the array will push element into it until the for loop is exhausted. \n          array.push(randomIntGeneration(0, 1000));\n        }//end for loop.\n\n        //testing the sorting algorithm: \n        const jsSortingBuiltIn = array.slice().sort((a,b) => a - b); //java built-in sorting function\n        const quickSort = getQuickSortAnimation(array.slice());\n        \n\n        console.log(checkArrayEqual(jsSortingBuiltIn, quickSort));\n        \n      }\n    }\n\n    render()\n    {\n        const {array} = this.state;\n\n        return (\n\n          <div className=\"array-container\">\n      \n          {array.map((value, idx) => (\n            <div className=\"array-bar\" key={idx}\n              style={{\n                backgroundColor: PRIMARY_COLOR,\n                height: `${value}px`,\n              }}\n              > \n              </div>\n          ))}\n\n          <div className='button'>\n            <button onClick={() => this.resetArray()}>Generate New Array</button>\n            <button onClick={() => this.mergeSortImpl()}>Merge Sort</button>\n            <button onClick={() => this.quickSortImpl()}>Quick Sort</button>\n            <button onClick={() => this.heapSortImpl()}>Heap Sort</button>\n            <button onClick={() => this.bubbleSortImpl()}>Bubble Sort</button>\n            <button onClick={() => this.testSortingAlgorithms()}>\n              Test Sorting Algorithms(Quick sort)\n            </button>\n          </div>\n         \n           \n         \n        </div>\n            \n        );\n\n    }\n\n}\n\n//Function to generate random integer from 5 to 1000\nfunction randomIntGeneration(min, max) \n{\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}\n\n//Function to test if two array of elements equal to each other\nfunction checkArrayEqual(arr1, arr2)\n{\n  //if the two arrays are not equal to each other in length, then they are not equal.\n  if (arr1.length !== arr2.length)\n  {\n    return false;\n  }\n\n  // looping through each character and check if they are both equals\n  for (let i=0; i < arr1.length; i++)\n  {\n    if (arr1[i] !== arr2[i])\n    {\n      //array are equals\n      return false;\n      \n    }\n\n  }\n  return true;\n} //end of program\n\n\n\n\n\n\n\n // //Helper method: \n    // mergeArr(leftSide, rightSide)\n    // {\n    //   let resultArray = []\n    //   let leftIndex = 0;\n    //   let rightIndex = 0; \n\n    //   //concatenate the two strings and sort them accordingly:\n    //   while(leftIndex < leftSide.length && rightIndex < rightSide.length)\n    //   {\n    //     if (leftSide[leftIndex] < rightSide[rightIndex])\n    //     {\n    //       resultArray.push(leftSide[leftIndex++]);\n    //       // //move the left cursor up:\n    //       // leftIndex++\n    //     }\n\n    //     else{\n    //       resultArray.push(rightSide[rightIndex++]);\n    //       // //move the right cursor up: \n    //       // rightIndex++;\n    //     }\n    //   }\n    //   while(leftIndex < leftSide.length) resultArray.push(leftSide[leftIndex++]);\n    //   while(rightIndex < rightSide.length) resultArray.push(rightSide[rightIndex++]);\n    //   //concat the two array together:\n    //   //we perform concatenation here because there will be one element remaining in both array:\n    //   // return resultArray.concat(leftSide.slice[leftIndex]).concat(rightSide.slice[rightIndex]);\n    //   return resultArray;\n    // }\n\n    /* let sortedArray = [];\n      //the array must contains value inside it\n      if(unsortedArray.length < 1)\n      {\n        alert (\"Error! Array is empty!\");\n\n      }\n\n      //if the array only contain 1 element, then no need to sort and return the array\n      if(unsortedArray.length == 1)\n      {\n        return unsortedArray;\n      }\n\n      //To divide the array in halfs, we must find the element in the middle\n      const middle = Math.floor(unsortedArray.length/2);\n\n      //divide the array into left and right sub-arrays:\n      const leftArr = unsortedArray.slice(0, middle);\n      const rightArr = unsortedArray.slice(middle);\n      //calls the function recursively to sort the two arrays and merge them together\n      sortedArray = this.mergeArr(this.mergeSort(leftArr), this.mergeSort(rightArr));\n      return sortedArray;\n\n*/\n"]},"metadata":{},"sourceType":"module"}
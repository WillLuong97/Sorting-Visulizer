{"ast":null,"code":"var _jsxFileName = \"/Users/willieluong/Desktop/sorting-visualizer/src/SortingVisualizer/SortingVisualizer.jsx\";\nimport React from 'react';\nimport { getMergeSortAnimations } from '../sortinalgorithms/sortingAlgorithms';\nimport './SortingVisualizer.css'; //global variable to control the speed of the animation\n//for MERGE sort\n\nconst ANIMATION_SPEED_MS = 1; //number of array bars being displayed\n\nconst NUMBER_OF_ARRAY_BARS = 310; //main color of the array bars:\n\nconst PRIMARY_COLOR = 'turquoise'; //the color of the array bar that is being compared throughout the sort\n\nconst SECONDARY_COLOR = 'red'; //the main function of the react app\n\nexport default class SortingVisualizer extends React.Component {\n  //sorting constructor:\n  constructor(props) {\n    super(props);\n    this.state = {\n      array: [] //main array that would print out the element to be sorted.\n\n    };\n  } //when the component of the app is loaded, it will reset the current of element\n\n\n  componentDidMount() {\n    this.resetArray();\n  } //resetting the array and generate new elements each time\n\n\n  resetArray() {\n    const array = []; //generating random integer for sorting: \n\n    for (let i = 0; i <= 310; i++) {\n      //pushing the integer into the array: \n      array.push(randomIntGeneration(5, 730));\n    }\n\n    this.setState({\n      array\n    });\n  } //sorting alorithms:\n\n\n  mergeSortImpl(unsortedArray) {\n    let sortedArray = []; //the array must contains value inside it\n\n    if (unsortedArray.length < 1) {\n      alert(\"Error! Array is empty!\");\n    } //if the array only contain 1 element, then no need to sort and return the array\n\n\n    if (unsortedArray.length == 1) {\n      return unsortedArray;\n    } //To divide the array in halfs, we must find the element in the middle\n\n\n    const middle = Math.floor(unsortedArray.length / 2); //divide the array into left and right sub-arrays:\n\n    const leftArr = unsortedArray.slice(0, middle);\n    const rightArr = unsortedArray.slice(middle); //calls the function recursively to sort the two arrays and merge them together\n\n    sortedArray = this.mergeArr(this.mergeSort(leftArr), this.mergeSort(rightArr));\n    return sortedArray;\n  } //end of mergeSort(array)\n\n\n  quickSortImpl() {}\n\n  heapSortImpl() {}\n\n  bubbleSortImpl() {} //function to test all sorting algorithm for debugging\n\n\n  testSortingAlgorithms() {\n    //the function will create 100 array with different length\n    for (var i = 0; i < 100; i++) {\n      // create an array at each iteration: \n      const array = []; //each array will have various length from 1 to 1000 \n\n      for (var j = 0; j < randomIntGeneration(1, 1000); j++) {\n        //the array will push element into it until the for loop is exhausted. \n        array.push(randomIntGeneration(0, 1000));\n      } //end for loop.\n      //testing the sorting algorithm: \n\n\n      const jsSortingBuiltIn = array.slice().sort((a, b) => a - b); //java built-in sorting function\n\n      const mergeSort = this.mergeSort(array.slice());\n      console.log(checkArrayEqual(jsSortingBuiltIn, mergeSort));\n    }\n  }\n\n  render() {\n    const {\n      array\n    } = this.state;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"array-container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(React.Fragment, null, array.map((value, idx) => /*#__PURE__*/React.createElement(\"div\", {\n      className: \"array-bar\",\n      key: idx,\n      style: {\n        // backgroundColor: PRIMARY_COLOR,\n        height: `${value}px`\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 13\n      }\n    }))), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => this.resetArray(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 12\n      }\n    }, \"Generate New Array\"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => this.mergeSortImpl(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 12\n      }\n    }, \"Merge Sort\"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => this.quickSortImpl(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 12\n      }\n    }, \"Quick Sort\"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => this.heapSortImpl(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 12\n      }\n    }, \"Heap Sort\"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => this.bubbleSortImpl(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 12\n      }\n    }, \"Bubble Sort\"), /*#__PURE__*/React.createElement(\"button\", {\n      onClick: () => this.testSortingAlgorithms(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 12\n      }\n    }, \"Test Sorting Algorithms\"));\n  }\n\n} //Function to generate random integer from 5 to 1000\n\nfunction randomIntGeneration(min, max) {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n} //Function to test if two array of elements equal to each other\n\n\nfunction checkArrayEqual(arr1, arr2) {\n  //if the two arrays are not equal to each other in length, then they are not equal.\n  if (arr1.length !== arr2.length) {\n    return false;\n  } // looping through each character and check if they are both equals\n\n\n  for (let i = 0; i < arr1.length; i++) {\n    if (arr1[i] !== arr2[i]) {\n      //array are equals\n      return false;\n    }\n  }\n\n  return true;\n} //end of program\n// //Helper method: \n// mergeArr(leftSide, rightSide)\n// {\n//   let resultArray = []\n//   let leftIndex = 0;\n//   let rightIndex = 0; \n//   //concatenate the two strings and sort them accordingly:\n//   while(leftIndex < leftSide.length && rightIndex < rightSide.length)\n//   {\n//     if (leftSide[leftIndex] < rightSide[rightIndex])\n//     {\n//       resultArray.push(leftSide[leftIndex++]);\n//       // //move the left cursor up:\n//       // leftIndex++\n//     }\n//     else{\n//       resultArray.push(rightSide[rightIndex++]);\n//       // //move the right cursor up: \n//       // rightIndex++;\n//     }\n//   }\n//   while(leftIndex < leftSide.length) resultArray.push(leftSide[leftIndex++]);\n//   while(rightIndex < rightSide.length) resultArray.push(rightSide[rightIndex++]);\n//   //concat the two array together:\n//   //we perform concatenation here because there will be one element remaining in both array:\n//   // return resultArray.concat(leftSide.slice[leftIndex]).concat(rightSide.slice[rightIndex]);\n//   return resultArray;\n// }","map":{"version":3,"sources":["/Users/willieluong/Desktop/sorting-visualizer/src/SortingVisualizer/SortingVisualizer.jsx"],"names":["React","getMergeSortAnimations","ANIMATION_SPEED_MS","NUMBER_OF_ARRAY_BARS","PRIMARY_COLOR","SECONDARY_COLOR","SortingVisualizer","Component","constructor","props","state","array","componentDidMount","resetArray","i","push","randomIntGeneration","setState","mergeSortImpl","unsortedArray","sortedArray","length","alert","middle","Math","floor","leftArr","slice","rightArr","mergeArr","mergeSort","quickSortImpl","heapSortImpl","bubbleSortImpl","testSortingAlgorithms","j","jsSortingBuiltIn","sort","a","b","console","log","checkArrayEqual","render","map","value","idx","height","min","max","random","arr1","arr2"],"mappings":"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","sourcesContent":["import React from 'react';\nimport {getMergeSortAnimations} from '../sortinalgorithms/sortingAlgorithms'\nimport './SortingVisualizer.css';\n\n\n//global variable to control the speed of the animation\n//for MERGE sort\nconst ANIMATION_SPEED_MS = 1;\n\n//number of array bars being displayed\nconst NUMBER_OF_ARRAY_BARS = 310; \n\n//main color of the array bars:\nconst PRIMARY_COLOR = 'turquoise';\n\n//the color of the array bar that is being compared throughout the sort\nconst SECONDARY_COLOR = 'red';\n\n//the main function of the react app\nexport default class SortingVisualizer extends React.Component {\n    //sorting constructor:\n    constructor(props) {\n      super(props);\n  \n      this.state = {\n        array: [],  //main array that would print out the element to be sorted.\n      };\n    }\n    \n    //when the component of the app is loaded, it will reset the current of element\n    componentDidMount() {\n      this.resetArray();\n    }\n\n    //resetting the array and generate new elements each time\n    resetArray(){\n        const array = [];\n        //generating random integer for sorting: \n        for(let i = 0; i <= 310; i++)\n        {\n            //pushing the integer into the array: \n            array.push(randomIntGeneration(5, 730));\n            \n        }\n\n        this.setState({array});\n\n    }\n\n    //sorting alorithms:\n    mergeSortImpl(unsortedArray)\n    {\n      let sortedArray = [];\n      //the array must contains value inside it\n      if(unsortedArray.length < 1)\n      {\n        alert (\"Error! Array is empty!\");\n\n      }\n\n      //if the array only contain 1 element, then no need to sort and return the array\n      if(unsortedArray.length == 1)\n      {\n        return unsortedArray;\n      }\n\n      //To divide the array in halfs, we must find the element in the middle\n      const middle = Math.floor(unsortedArray.length/2);\n\n      //divide the array into left and right sub-arrays:\n      const leftArr = unsortedArray.slice(0, middle);\n      const rightArr = unsortedArray.slice(middle);\n      //calls the function recursively to sort the two arrays and merge them together\n      sortedArray = this.mergeArr(this.mergeSort(leftArr), this.mergeSort(rightArr));\n      return sortedArray;\n    } //end of mergeSort(array)\n\n    quickSortImpl()\n    {\n\n    }\n\n    heapSortImpl()\n    {\n\n    }\n\n    bubbleSortImpl()\n    {\n\n    }\n\n    //function to test all sorting algorithm for debugging\n    testSortingAlgorithms()\n    {\n      //the function will create 100 array with different length\n      for(var i = 0; i < 100; i++)\n      {\n        // create an array at each iteration: \n        const array = []\n        //each array will have various length from 1 to 1000 \n        for(var j = 0; j < randomIntGeneration(1, 1000); j++)\n        {\n          //the array will push element into it until the for loop is exhausted. \n          array.push(randomIntGeneration(0, 1000));\n        }//end for loop.\n\n        //testing the sorting algorithm: \n        const jsSortingBuiltIn = array.slice().sort((a,b) => a - b); //java built-in sorting function\n        const mergeSort = this.mergeSort(array.slice());\n\n        console.log(checkArrayEqual(jsSortingBuiltIn, mergeSort));\n        \n      }\n    }\n\n    render()\n    {\n        const {array} = this.state;\n\n        return (\n\n          <div className=\"array-container\">\n          <>\n          {array.map((value, idx) => (\n            <div className=\"array-bar\" key={idx}\n              style={{\n                // backgroundColor: PRIMARY_COLOR,\n                height: `${value}px`,\n              }}\n              > \n              </div>\n          ))}\n\n          </>\n           <button onClick={() => this.resetArray()}>Generate New Array</button>\n           <button onClick={() => this.mergeSortImpl()}>Merge Sort</button>\n           <button onClick={() => this.quickSortImpl()}>Quick Sort</button>\n           <button onClick={() => this.heapSortImpl()}>Heap Sort</button>\n           <button onClick={() => this.bubbleSortImpl()}>Bubble Sort</button>\n           <button onClick={() => this.testSortingAlgorithms()}>\n             Test Sorting Algorithms\n           </button>\n         \n        </div>\n            \n        );\n\n    }\n\n}\n\n//Function to generate random integer from 5 to 1000\nfunction randomIntGeneration(min, max) \n{\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}\n\n//Function to test if two array of elements equal to each other\nfunction checkArrayEqual(arr1, arr2)\n{\n  //if the two arrays are not equal to each other in length, then they are not equal.\n  if (arr1.length !== arr2.length)\n  {\n    return false;\n  }\n\n  // looping through each character and check if they are both equals\n  for (let i=0; i < arr1.length; i++)\n  {\n    if (arr1[i] !== arr2[i])\n    {\n      //array are equals\n      return false;\n      \n    }\n\n  }\n  return true;\n} //end of program\n\n\n\n\n\n\n\n // //Helper method: \n    // mergeArr(leftSide, rightSide)\n    // {\n    //   let resultArray = []\n    //   let leftIndex = 0;\n    //   let rightIndex = 0; \n\n    //   //concatenate the two strings and sort them accordingly:\n    //   while(leftIndex < leftSide.length && rightIndex < rightSide.length)\n    //   {\n    //     if (leftSide[leftIndex] < rightSide[rightIndex])\n    //     {\n    //       resultArray.push(leftSide[leftIndex++]);\n    //       // //move the left cursor up:\n    //       // leftIndex++\n    //     }\n\n    //     else{\n    //       resultArray.push(rightSide[rightIndex++]);\n    //       // //move the right cursor up: \n    //       // rightIndex++;\n    //     }\n    //   }\n    //   while(leftIndex < leftSide.length) resultArray.push(leftSide[leftIndex++]);\n    //   while(rightIndex < rightSide.length) resultArray.push(rightSide[rightIndex++]);\n    //   //concat the two array together:\n    //   //we perform concatenation here because there will be one element remaining in both array:\n    //   // return resultArray.concat(leftSide.slice[leftIndex]).concat(rightSide.slice[rightIndex]);\n    //   return resultArray;\n    // }"]},"metadata":{},"sourceType":"module"}
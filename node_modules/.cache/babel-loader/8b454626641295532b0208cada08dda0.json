{"ast":null,"code":"//Function to hadnle quick sort algorithm \nexport function getQuickSortAnimation(array) {\n  //animation arrays that stores the bar that would change the colors\n  let animation = [];\n  let auxilaryArray = array.slice();\n  getQuickSort(auxilaryArray, 0, auxilaryArray.length - 1, animation);\n  return animation;\n}\n\nfunction getQuickSort(array, startIndex, endIndex, animation) {} //checking the bound \n//Helper Method to partition the two sides of the array: \n\n\nfunction partition(array, left, right, pivot) {\n  //move the pointers along the array\n  while (left < right) {\n    // if the left side is lesser than the pivot, the left pointer will keep going until an element is out of place\n    while (array[left] < pivot) {\n      //keep moving right\n      left++;\n    } //if the right side is still greater than the pivot, then the right pointer will keep going until an element is out of place\n\n\n    while (array[right] > pivot) {\n      //keep going left\n      right--;\n    }\n\n    if (left <= right) {\n      swap(array, left, right);\n      left++;\n      right--;\n    }\n  } // end while loop\n  //the pivot should (ideally) be on the left side at the end of the algorithm \n\n\n  return left;\n} //function to swap element: \n\n\nfunction swap(array, left, right) {\n  let temp = array[left];\n  array[left] = array[right];\n  array[right] = temp;\n} //end of swap()","map":{"version":3,"sources":["/Users/willieluong/Desktop/sorting-visualizer/src/sortinalgorithms/QuickSort.js"],"names":["getQuickSortAnimation","array","animation","auxilaryArray","slice","getQuickSort","length","startIndex","endIndex","partition","left","right","pivot","swap","temp"],"mappings":"AAAA;AACA,OAAO,SAASA,qBAAT,CAA+BC,KAA/B,EACP;AACI;AACA,MAAIC,SAAS,GAAG,EAAhB;AACA,MAAIC,aAAa,GAAGF,KAAK,CAACG,KAAN,EAApB;AACAC,EAAAA,YAAY,CAACF,aAAD,EAAgB,CAAhB,EAAmBA,aAAa,CAACG,MAAd,GAAuB,CAA1C,EAA6CJ,SAA7C,CAAZ;AACA,SAAOA,SAAP;AACH;;AAED,SAASG,YAAT,CAAsBJ,KAAtB,EAA6BM,UAA7B,EAAyCC,QAAzC,EAAmDN,SAAnD,EACA,CAIC,CALD,CAEI;AAKJ;;;AACA,SAASO,SAAT,CAAmBR,KAAnB,EAA0BS,IAA1B,EAAgCC,KAAhC,EAAuCC,KAAvC,EACA;AACI;AACA,SAAQF,IAAI,GAAGC,KAAf,EACA;AACI;AACA,WAAMV,KAAK,CAACS,IAAD,CAAL,GAAcE,KAApB,EACA;AACI;AACAF,MAAAA,IAAI;AACP,KANL,CAQI;;;AACA,WAAMT,KAAK,CAACU,KAAD,CAAL,GAAeC,KAArB,EACA;AACI;AACAD,MAAAA,KAAK;AACR;;AAED,QAAID,IAAI,IAAIC,KAAZ,EACA;AACIE,MAAAA,IAAI,CAACZ,KAAD,EAAQS,IAAR,EAAcC,KAAd,CAAJ;AACAD,MAAAA,IAAI;AACJC,MAAAA,KAAK;AACR;AACJ,GAxBL,CAwBK;AAED;;;AACA,SAAOD,IAAP;AAEH,C,CAKD;;;AACA,SAASG,IAAT,CAAcZ,KAAd,EAAqBS,IAArB,EAA2BC,KAA3B,EACA;AACI,MAAIG,IAAI,GAAGb,KAAK,CAACS,IAAD,CAAhB;AACAT,EAAAA,KAAK,CAACS,IAAD,CAAL,GAAcT,KAAK,CAACU,KAAD,CAAnB;AACAV,EAAAA,KAAK,CAACU,KAAD,CAAL,GAAeG,IAAf;AAEH,C,CAAA","sourcesContent":["//Function to hadnle quick sort algorithm \nexport function getQuickSortAnimation(array)\n{\n    //animation arrays that stores the bar that would change the colors\n    let animation = [];\n    let auxilaryArray = array.slice();\n    getQuickSort(auxilaryArray, 0, auxilaryArray.length - 1, animation);\n    return animation;\n}\n\nfunction getQuickSort(array, startIndex, endIndex, animation)\n{\n    //checking the bound \n\n   \n}\n\n//Helper Method to partition the two sides of the array: \nfunction partition(array, left, right, pivot)\n{\n    //move the pointers along the array\n    while ( left < right)\n    {\n        // if the left side is lesser than the pivot, the left pointer will keep going until an element is out of place\n        while(array[left] < pivot)\n        {\n            //keep moving right\n            left++; \n        }\n\n        //if the right side is still greater than the pivot, then the right pointer will keep going until an element is out of place\n        while(array[right] > pivot)\n        {\n            //keep going left\n            right--; \n        }\n\n        if (left <= right)\n        {\n            swap(array, left, right);\n            left++;\n            right--;\n        }\n    }// end while loop\n\n    //the pivot should (ideally) be on the left side at the end of the algorithm \n    return left;\n\n}\n\n\n\n\n//function to swap element: \nfunction swap(array, left, right)\n{\n    let temp = array[left];\n    array[left] = array[right];\n    array[right] = temp;\n\n}//end of swap()\n\n\n\n\n\n"]},"metadata":{},"sourceType":"module"}
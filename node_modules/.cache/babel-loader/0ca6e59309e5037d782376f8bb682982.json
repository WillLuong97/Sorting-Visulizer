{"ast":null,"code":"//Function to hadnle quick sort algorithm \n// export function getQuickSortAnimation(array)\n// {\n//     quickSort(array, 0, (array.length - 1));\n// }\nfunction quickSort(array) {\n  //bound check: \n  if (left < right) {\n    return;\n  } //pick a pivot element in the array\n  //In this case, the pivot element will be the middle element for better time complexity\n\n\n  var pivot = array[(left + right) / 2]; //recursive call until the array of both the left side and right side of the element are sorted: \n\n  if (array.length > 1) {\n    //partiion the left side and right side of the pivot element:\n    var index = partition(array, left, right, pivot);\n\n    if (left < index - 1) {\n      //there are still more element on the left side of the array\n      quickSort(array, left, index - 1); //sort the left partition of the array\n    }\n\n    if (index < right) {\n      //more elements on the left side of the pivot\n      quickSort(array, index, right); //sort the right partition of the array\n    }\n  }\n\n  return array;\n} //Helper Method to partition the two sides of the array: \n\n\nfunction partition(array, left, right, pivot) {\n  //move the pointers along the array\n  while (left <= right) {\n    // if the left side is lesser than the pivot, the left pointer will keep going until an element is out of place\n    while (array[left] < pivot) {\n      //keep moving right\n      left++;\n    } //if the right side is still greater than the pivot, then the right pointer will keep going until an element is out of place\n\n\n    while (array[right] > pivot) {\n      //keep going left\n      right--;\n    }\n\n    if (left <= right) {\n      swap(array, left, right);\n      left++;\n      right--;\n    }\n  } // end while loop\n  //the pivot should (ideally) be on the left side at the end of the algorithm \n\n\n  return left;\n} //function to swap element: \n\n\nfunction swap(array, left, right) {\n  let temp = array[left];\n  array[left] = array[right];\n  array[right] = temp;\n} //end of swap()","map":{"version":3,"sources":["/Users/willieluong/Desktop/sorting-visualizer/src/sortinalgorithms/QuickSort.js"],"names":["quickSort","array","left","right","pivot","length","index","partition","swap","temp"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AAEA,SAASA,SAAT,CAAmBC,KAAnB,EACA;AACI;AACA,MAAIC,IAAI,GAAGC,KAAX,EACA;AACI;AACH,GALL,CAOI;AACA;;;AACA,MAAIC,KAAK,GAAGH,KAAK,CAAC,CAACC,IAAI,GAAGC,KAAR,IAAiB,CAAlB,CAAjB,CATJ,CAWI;;AACA,MAAGF,KAAK,CAACI,MAAN,GAAe,CAAlB,EACA;AACI;AACA,QAAIC,KAAK,GAAGC,SAAS,CAACN,KAAD,EAAQC,IAAR,EAAaC,KAAb,EAAoBC,KAApB,CAArB;;AACA,QAAGF,IAAI,GAAGI,KAAK,GAAG,CAAlB,EACA;AAAC;AACGN,MAAAA,SAAS,CAACC,KAAD,EAAQC,IAAR,EAAcI,KAAK,GAAG,CAAtB,CAAT,CADJ,CACuC;AACtC;;AAED,QAAGA,KAAK,GAAIH,KAAZ,EACA;AAAE;AACEH,MAAAA,SAAS,CAACC,KAAD,EAAQK,KAAR,EAAeH,KAAf,CAAT,CADJ,CACoC;AAEnC;AACJ;;AAED,SAAOF,KAAP;AACH,C,CAED;;;AACA,SAASM,SAAT,CAAmBN,KAAnB,EAA0BC,IAA1B,EAAgCC,KAAhC,EAAuCC,KAAvC,EACA;AACI;AACA,SAAQF,IAAI,IAAIC,KAAhB,EACA;AACI;AACA,WAAMF,KAAK,CAACC,IAAD,CAAL,GAAcE,KAApB,EACA;AACI;AACAF,MAAAA,IAAI;AACP,KANL,CAQI;;;AACA,WAAMD,KAAK,CAACE,KAAD,CAAL,GAAeC,KAArB,EACA;AACI;AACAD,MAAAA,KAAK;AACR;;AAED,QAAID,IAAI,IAAIC,KAAZ,EACA;AACIK,MAAAA,IAAI,CAACP,KAAD,EAAQC,IAAR,EAAcC,KAAd,CAAJ;AACAD,MAAAA,IAAI;AACJC,MAAAA,KAAK;AACR;AACJ,GAxBL,CAwBK;AAED;;;AACA,SAAOD,IAAP;AAEH,C,CAKD;;;AACA,SAASM,IAAT,CAAcP,KAAd,EAAqBC,IAArB,EAA2BC,KAA3B,EACA;AACI,MAAIM,IAAI,GAAGR,KAAK,CAACC,IAAD,CAAhB;AACAD,EAAAA,KAAK,CAACC,IAAD,CAAL,GAAcD,KAAK,CAACE,KAAD,CAAnB;AACAF,EAAAA,KAAK,CAACE,KAAD,CAAL,GAAeM,IAAf;AAEH,C,CAAA","sourcesContent":["//Function to hadnle quick sort algorithm \n// export function getQuickSortAnimation(array)\n// {\n//     quickSort(array, 0, (array.length - 1));\n// }\n\nfunction quickSort(array)\n{\n    //bound check: \n    if (left < right)\n    {\n        return;\n    }\n\n    //pick a pivot element in the array\n    //In this case, the pivot element will be the middle element for better time complexity\n    var pivot = array[(left + right) / 2];\n    \n    //recursive call until the array of both the left side and right side of the element are sorted: \n    if(array.length > 1)\n    {\n        //partiion the left side and right side of the pivot element:\n        var index = partition(array, left,right, pivot);\n        if(left < index - 1)\n        {//there are still more element on the left side of the array\n            quickSort(array, left, index - 1); //sort the left partition of the array\n        }\n\n        if(index  < right)\n        { //more elements on the left side of the pivot\n            quickSort(array, index, right); //sort the right partition of the array\n\n        }\n    }\n   \n    return array;\n}\n\n//Helper Method to partition the two sides of the array: \nfunction partition(array, left, right, pivot)\n{\n    //move the pointers along the array\n    while ( left <= right)\n    {\n        // if the left side is lesser than the pivot, the left pointer will keep going until an element is out of place\n        while(array[left] < pivot)\n        {\n            //keep moving right\n            left++; \n        }\n\n        //if the right side is still greater than the pivot, then the right pointer will keep going until an element is out of place\n        while(array[right] > pivot)\n        {\n            //keep going left\n            right--; \n        }\n\n        if (left <= right)\n        {\n            swap(array, left, right);\n            left++;\n            right--;\n        }\n    }// end while loop\n\n    //the pivot should (ideally) be on the left side at the end of the algorithm \n    return left;\n\n}\n\n\n\n\n//function to swap element: \nfunction swap(array, left, right)\n{\n    let temp = array[left];\n    array[left] = array[right];\n    array[right] = temp;\n\n}//end of swap()\n\n\n\n\n\n"]},"metadata":{},"sourceType":"module"}
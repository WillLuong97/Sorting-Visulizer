{"ast":null,"code":"//The utils file will handle  backend of each sorting algorithms\n//as well as the animation logic behind it. \n//exporting function to other file\n//this function will merge sort the array and visualize the process to the JS front end. \nexport function getMergeSortAnimations(array) {\n  //an array of indices of elements being evaluated in the array.\n  const animation = []; // if the array to be sorted only has one element, return it, no sorting to be done\n\n  if (array.length <= 1) {\n    return array;\n  } //supplement array that store the original array.\n\n\n  const auxilaryArray = array.slice();\n  mergeSortHelper(array, 0, array.length - 1, auxilaryArray, animation);\n  console.log(animation);\n  return animation;\n} //end of function\n//Helper method to begin the merge sort algorithm\n\nfunction mergeSortHelper(mainArray, startIndex, endIndex, auxilaryArray, animation) {\n  //if the array is empty: \n  if (startIndex == endIndex) {\n    return; //break \n  } //finding the middle index in the array: \n\n\n  const middleIndex = Math.floor((startIndex + endIndex) / 2); //sort the first halves and second halves of the main array through recursion \n\n  mergeSortHelper(auxilaryArray, startIndex, middleIndex, mainArray, animation);\n  mergeSortHelper(auxilaryArray, middleIndex + 1, endIndex, mainArray, animation); //after sorting each array, we will them together\n\n  doMerge(mainArray, startIndex, middleIndex, endIndex, auxilaryArray, animation);\n} //end of mergeSortHelper()\n//function to merge the two array together and process the animation: \n\n\nfunction doMerge(mainArray, startIndex, middleIndex, endIndex, auxilaryArray, animation) {\n  //initialize variables: \n  let k = startIndex;\n  let i = startIndex;\n  let j = middleIndex + 1;\n\n  while (i <= middleIndex && j <= endIndex) {\n    //these are the values that are being checked by the algorithm, we will push them into the animation list \n    //to change its color\n    animation.push([i, j]); //we will push them the second time to revert their color:\n\n    animation.push([i, j]);\n\n    if (auxilaryArray[i] <= auxilaryArray[j]) {\n      //we overwrite the value at index k (which is still a starting index here), in the original array \n      // with the value at index i in the auxilary array\n      //we swap the two element\n      animation.push(k, auxilaryArray[i]); //increment the current index in both array\n\n      mainArray[k++] = auxilaryArray[i++];\n    } else {\n      //we will overwrite the value at index k in the original array with the \n      //value at index j in the auxilary array. \n      animation.push([k, auxilaryArray[j]]);\n      mainArray[k++] = auxilaryArray[j++];\n    }\n  }\n\n  while (i <= middleIndex) {\n    //these are the values that we are comparing, we push them once \n    //we push them once to change the color\n    animation.push([i, j]); //these are the values that we are comparing; we push them a second \n    //time to revert the color\n\n    animation.push([i, j]); // We overwrite the value at index k in the original array with the\n    // value at index i in the auxiliary array.\n\n    animation.push([k, auxilaryArray[i]]);\n    mainArray[k++] = auxilaryArray[i++];\n  }\n\n  while (j <= endIndex) {\n    // These are the values that we're comparing; we push them once\n    // to change their color.\n    animation.push([j, j]); // These are the values that we're comparing; we push them a second\n    // time to revert their color.\n\n    animation.push([j, j]); // We overwrite the value at index k in the original array with the\n    // value at index j in the auxiliary array.\n\n    animation.push([k, auxilaryArray[j]]);\n    mainArray[k++] = auxilaryArray[j++];\n  }\n} //end of program","map":{"version":3,"sources":["/Users/willieluong/Desktop/sorting-visualizer/src/sortinalgorithms/sortingAlgorithms.js"],"names":["getMergeSortAnimations","array","animation","length","auxilaryArray","slice","mergeSortHelper","console","log","mainArray","startIndex","endIndex","middleIndex","Math","floor","doMerge","k","i","j","push"],"mappings":"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","sourcesContent":["//The utils file will handle  backend of each sorting algorithms\n//as well as the animation logic behind it. \n\n//exporting function to other file\n//this function will merge sort the array and visualize the process to the JS front end. \nexport function getMergeSortAnimations(array)\n{\n    //an array of indices of elements being evaluated in the array.\n    const animation = [];\n    // if the array to be sorted only has one element, return it, no sorting to be done\n    if(array.length <= 1)\n    {\n        return array;\n    }\n    //supplement array that store the original array.\n    const auxilaryArray = array.slice();\n    mergeSortHelper(array, 0, array.length - 1, auxilaryArray, animation);\n    console.log(animation)\n    return animation;\n}//end of function\n\n//Helper method to begin the merge sort algorithm\nfunction mergeSortHelper(mainArray, startIndex, endIndex, auxilaryArray, animation)\n{\n    //if the array is empty: \n    if(startIndex == endIndex)\n    {\n        return; //break \n    }\n    //finding the middle index in the array: \n    const middleIndex = Math.floor((startIndex + endIndex) / 2);\n    //sort the first halves and second halves of the main array through recursion \n    mergeSortHelper(auxilaryArray, startIndex, middleIndex, mainArray, animation);\n    mergeSortHelper(auxilaryArray, middleIndex + 1, endIndex, mainArray, animation);\n    //after sorting each array, we will them together\n    doMerge(mainArray, startIndex, middleIndex, endIndex, auxilaryArray, animation);\n}//end of mergeSortHelper()\n\n//function to merge the two array together and process the animation: \nfunction doMerge(mainArray, startIndex, middleIndex, endIndex, auxilaryArray, animation)\n{\n    //initialize variables: \n    let k = startIndex;\n    let i = startIndex; \n    let j = middleIndex + 1;\n    while(i <= middleIndex && j <= endIndex)\n    {\n        //these are the values that are being checked by the algorithm, we will push them into the animation list \n        //to change its color\n        animation.push([i, j]);\n\n        //we will push them the second time to revert their color:\n        animation.push([i, j]);\n        if(auxilaryArray[i] <= auxilaryArray[j])\n        {\n            //we overwrite the value at index k (which is still a starting index here), in the original array \n            // with the value at index i in the auxilary array\n            //we swap the two element\n            animation.push(k, auxilaryArray[i]);\n            //increment the current index in both array\n            mainArray[k++] = auxilaryArray[i++];\n        }\n\n        else{\n            //we will overwrite the value at index k in the original array with the \n            //value at index j in the auxilary array. \n            animation.push([k, auxilaryArray[j]]);\n            mainArray[k++] = auxilaryArray[j++];\n        }\n    }\n\n    while (i <= middleIndex)\n    {\n        //these are the values that we are comparing, we push them once \n        //we push them once to change the color\n        animation.push([i, j]); \n        //these are the values that we are comparing; we push them a second \n        //time to revert the color\n        animation.push([i,j]);\n        // We overwrite the value at index k in the original array with the\n        // value at index i in the auxiliary array.\n        animation.push([k, auxilaryArray[i]]);\n        mainArray[k++] = auxilaryArray[i++];\n    }\n\n    while (j <= endIndex)\n    {\n        // These are the values that we're comparing; we push them once\n        // to change their color.\n        animation.push([j, j]);\n        // These are the values that we're comparing; we push them a second\n        // time to revert their color.\n        animation.push([j, j]);\n        // We overwrite the value at index k in the original array with the\n        // value at index j in the auxiliary array.\n        animation.push([k, auxilaryArray[j]]);\n        mainArray[k++] = auxilaryArray[j++];\n    }\n}//end of program"]},"metadata":{},"sourceType":"module"}